name: deb-on-24.04-dpkg-deb

on: workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # This yml is copied from https://github.com/hn-88/OCVWarp/blob/master/.github/workflows/cmake-nix.yml
  # and modified.
  BUILD_TYPE: Release
  # As recommended here: https://github.com/marketplace/actions/sccache-action
  OPENSPACE_VERSION: "0.21.pre0bec798on24.04"
  APPIMAGE_VERSION: "1"
  # COMMIT_HASH: "0bec798cb39c2765373283a21312478d3d2e3c7f"
  COMMIT_HASH: "DebwithCPack"
  
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4
    
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: false
        docker-images: true
        swap-storage: false
    
    - name: get openspace code for a particular release
      # https://docs.openspaceproject.com/releases-v0.20/contribute/development/compiling/ubuntu.html
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        git clone --recursive https://github.com/hn-88/OpenSpace "$openSpaceHome"
        cd "$openSpaceHome"
        git checkout "${COMMIT_HASH}" --recurse-submodules
        # try the latest main branch, one of the latest commits
        mkdir build
        cd build
        
    
    - name: Install dependencies
      # https://docs.openspaceproject.com/releases-v0.20/contribute/development/compiling/ubuntu.html
      run: |
        sudo apt update
        sudo apt-get -y install glew-utils libpng-dev freeglut3-dev git libxrandr-dev libxinerama-dev xorg-dev libxcursor-dev libcurl4-openssl-dev libxi-dev libasound2-dev libgdal-dev libboost-all-dev qt6-base-dev libmpv-dev libvulkan-dev
        sudo apt-get -y install software-properties-common
        sudo apt-get -y install libasound2t64 
        # libasound2-data libasound2-plugins

  
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"
        echo "Please note the extra variables passed for making the deb package ..."
        cmake -DCMAKE_BUILD_TYPE="Release" -DCMAKE_CXX_COMPILER=/usr/bin/g++-13 -DCMAKE_C_COMPILER=/usr/bin/gcc-13 \
          -DCMAKE_CXX_STANDARD=20 -DASSIMP_BUILD_MINIZIP=1 -DBUILD_TESTS=OFF -DOPENSPACE_HAVE_TESTS=OFF -DSGCT_BUILD_TESTS=OFF \
          -DOPENSPACE_DISTRO=ubuntu24.04 -DCMAKE_INSTALL_PREFIX=/usr "$openSpaceHome"

    - name: Build
      # Build your program with the given configuration
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"
        # Use the system's libvulkan, not the vendored one, otherwise they might conflict
        cef_orig_dir=$(find $HOME/source/OpenSpace/build -path */Release/libcef.so | xargs dirname)
        rm -v $cef_orig_dir/libvulkan.so.1
        cmake --build . --parallel 3

    - name: Install to staging and prune developer files
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"

        # Install into a staging directory
        DESTDIR="$PWD/staging" cmake --install .

        echo "=== Pruning developer files ==="
        find "$PWD/staging" \
          \( -name '*.a' -o -name '*.gitignore' -o -name '*.git' -o -name '*.cpp' -o -name '*.c' -o -name '*.pc' -o -name '*.a' -o -name '*.hpp' -o -name '*.h' -o -name '*.cmake' -o -name 'CMakeLists.txt' \) \
          -type f -exec rm -v {} +

        # Delete entire .git directories if they exist
        find "$PWD/staging" -type d -name '.git' -prune -print -exec rm -rf {} +

        echo "=== Removing empty directories ==="
        # Delete empty directories bottom-up
        find "$PWD/staging" -type d -empty -print -delete

        # Delete binary from geos-dev package
        # rm -v "$PWD/staging/usr/bin/geos-config"
        # rm: cannot remove '/home/runner/source/OpenSpace/build/staging/usr/bin/geos-config': No such file or directory

    - name: Create DEBIAN metadata
      run: |
        
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"

        set -euo pipefail
        install -d "$PWD/staging/DEBIAN"
    
        # control
        {
          echo "Package: openspace"
          echo "Version: 0.21.2-1"
          echo "Section: science"
          echo "Priority: optional"
          echo "Architecture: amd64"
          echo "Maintainer: OpenSpace team <info@openspaceproject.com>"
          echo "Depends: libglew2.2, libpng16-16t64, libglut3.12, libjack0, libxrandr2, libxinerama1, libx11-6, libxcursor1, libcurl4t64, libxi6, libasound2t64, libgdal34t64, libmpv2, libvulkan1, patch, libboost-all-dev, qt6-base-dev"
          echo "Description: interactive 3D visualization of space and planetary data"
          echo " OpenSpace is an open-source, real-time 3D application for visualizing astronomy"
          echo " and spaceflight data. It renders celestial bodies, star catalogs, and spacecraft"
          echo " trajectories, and can be used on desktops and in dome theaters."
          echo " "
          echo " It supports time navigation, high-resolution tiled planetary textures, and"
          echo " loading mission ephemerides. The application can be scripted for presentations"
          echo " and live shows, and is suitable for education, outreach, and research"
          echo " visualizations."
        } > "$PWD/staging/DEBIAN/control"
    
        # postinst
        {
          echo "#!/bin/sh"
          echo "set -e"
          echo ""
          echo "PATCH_TARGET=\"/usr/share/openspace/openspace.cfg\""
          echo "PATCH_FILE=\"/usr/share/openspace/openspacecfg.patch\""
          echo ""
          echo "if [ -f \"\$PATCH_TARGET\" ] && [ -f \"\$PATCH_FILE\" ]; then"
          echo "    patch \"\$PATCH_TARGET\" < \"\$PATCH_FILE\""
          echo "fi"
          echo ""
          echo "exit 0"
        } > "$PWD/staging/DEBIAN/postinst"
        chmod 755 "$PWD/staging/DEBIAN/postinst"

        # changelog
        {
          echo "openspace (0.21.2-1) unstable; urgency=medium"
          echo ""
          echo "  * Initial packaging for Debian/Ubuntu"
          echo ""
          echo " -- OpenSpace team <info@openspaceproject.com>  $(date -R)"
        } > "$PWD/staging/DEBIAN/changelog"
    
        # copyright
        {
          echo "Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/"
          echo "Upstream-Name: OpenSpace"
          echo "Source: https://openspaceproject.com/"
          echo ""
          echo "Files: *"
          echo "Copyright: 2014-2025 OpenSpace team"
          echo "License: MIT"
        } > "$PWD/staging/DEBIAN/copyright"



    - name: Create .deb package
      run: |
        
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"

        set -euo pipefail
        DATE=$(date +%Y%m%dT%H%M%S)
        VERSION="0.21.2-2~ubuntu24.04.1"
        ARCH="amd64"
        OUTFILE="openspace_${VERSION}_${ARCH}_${DATE}.deb"
    
        dpkg-deb --build staging "$OUTFILE"
    
        echo "Built package: $OUTFILE"



        
    - name: Upload AppImage Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: OpenSpace-dpkg-deb
        # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: /home/runner/source/OpenSpace/build/openspace*.deb

    - name: Create GitHub Release (if needed) and upload .deb
      
      run: |
        
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"

        set -euo pipefail
        DATE=$(date +%Y%m%dT%H%M%S)
        VERSION="0.21.2-2~ubuntu24.04.1"
        ARCH="amd64"
        OUTFILE="openspace_${VERSION}_${ARCH}_${DATE}.deb"

        # -----------------------
        # Upload to GitHub Release
        RELEASE_TAG="daily-dpkg-deb-${DATE}"
    
        # Create release if it doesn't exist
        gh release view "$RELEASE_TAG" || gh release create "$RELEASE_TAG" -t "OpenSpace Daily Build with dpkg-deb $DATE" -n "Automated daily build of OpenSpace"
    
        # Upload .deb asset (overwrite if exists)
        gh release upload "$RELEASE_TAG" "$OUTFILE" --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      
    
